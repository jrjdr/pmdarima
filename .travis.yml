# The Travis build will test both Linux AND OSX distributions, but language needs to be
# overridden to "generic" for Mac, otherwise the build will fail until Python is downloaded
# via Homebrew (which is handled in the before_install.sh). Note that none of the test envs
# or wheels test/create artifacts on <64 bit Linux or Mac. All artifacts are 64-bit ONLY.
language: python
sudo: required

cache:
  apt: true
  directories:
  - $HOME/.cache/pip
  - $HOME/.ccache

before_install:
  - source build_tools/travis/before_install.sh
env:
  global:
    - PYMODULE=pyramid
    - TEST_DIR=/tmp/pyramid
    - OMP_NUM_THREADS=4
    - OPENBLAS_NUM_THREADS=4
    # Matplotlib variables:
    - PYRAMID_MPL_DEBUG="true"
    - PYRAMID_MPL_BACKEND="TkAgg"
    - MPL_VERSION="2.2.3"
    # So we don't test MPL
    - TESTING_ON_TRAVIS="true"
    # Deployment variables:
    # - TWINE_REPOSITORY_URL="https://test.pypi.org/legacy/"  # only for test
    - TWINE_USERNAME="tgsmith61591.gh"
    - secure: "nLu1oztl7hWoLZbUc3lWoTVC0x4feY7x3S0z2RzbbVg7EjoRUNS1do1bRxsNBvZt1ujQAmRN2hTA6gr66KtElHtKAMbbx7/MUdFvnWQdw6urVwapRxPyzHv5Yhg1+iBaKAeUWeSSX1QETsCbPgmu6vzxFfp1wlCg++kO9n0RsNSlc9TejgPyVRY+mMxFktbEydfXJCMVg6D0wHJ+No3l2Y0k2UNfzSwYy+a4JobX6uad+8z303mr9+1iQyfiQyTyiurAPw3nM/sSqizV0LBdjm4mCho1aopZwF7gfh4YwYLYuVz6btGIoR5fEoF2nCTOKFyehooPWyx0vllKoUZ5BJMsJEPYXQnDQulimAoBjaTt/2TFxjdyHEuK7gAMko19Vvb5209yVoi/+REfZ0qC3P1pvF5iHKTl9mEkuMwvr2UYaetH7IsZq610c7aZf0ygj/snx4SfkFLvl5LolSqqI3Mzb9vKsef1yrf/G5L4dARC8gALfz6DS0e2GhnJDJafDGXIlfnx+tG0bKs1+vTkI8R09P7BxgaCTEeAWUdycBE2wx4hD7a58rStvHNU8tunbtBhQgHkAx/k5Cwd32LCQazWJLSht0SCdkW8mnW+U5IkcHHh2/7kYQIw2gnEiwiNGiBuuZXPfeYJRd1AqsjkXk798jKV9Xg1GD14mHdL628="

matrix:
  include:
    # This environment tests the oldest supported anaconda env. Except some of these (i.e., statsmodels
    # and sklearn) require higher versions of numpy, so cannot really test *actual* oldest... this also
    # tests against linux.
    # - os: linux
    #   dist: trusty
    #   services:
    #     - docker
    #   env: DISTRIB="conda" PYTHON_VERSION="2.7" CYTHON_VERSION="0.23.5"
    #        COVERAGE=true SCIKIT_LEARN_VERSION="0.17.1" DEPLOY=true CACHEC=true
    #        DOCKER_IMAGE="quay.io/pypa/manylinux1_x86_64" DOCKER_CONTAINER_NAME="pyramidcontainer"

    # This environment tests against Linux with CPython 2.7.x built with UCS-4 encoding
    # - os: linux
    #   dist: trusty
    #   services:
    #     - docker
    #   env: DISTRIB="conda" PYTHON_VERSION="2.7" CYTHON_VERSION="0.23.5"
    #        COVERAGE=true SCIKIT_LEARN_VERSION="0.17.1" DEPLOY=true CACHEC=true
    #        DOCKER_IMAGE="quay.io/pypa/manylinux1_x86_64" DOCKER_CONTAINER_NAME="pyramidcontainer"
    #        UCS_SETTING="ucs4"

    # This environment tests the same conditions as above, but tests against MAC OS X,
    # using virtualenv instead of the conda python distribution
    # - os: osx
    #   language: generic
    #   env: DISTRIB="conda" PYTHON_VERSION="2.7" CYTHON_VERSION="0.23.5"
    #        COVERAGE=true SCIKIT_LEARN_VERSION="0.17.1" DEPLOY=true CACHEC=false

    # This environment tests Python 3.5 support on linux
    # - os: linux
    #   dist: trusty
    #   services:
    #     - docker
    #   env: DISTRIB="conda" PYTHON_VERSION="3.5" INSTALL_MKL="true"
    #        NUMPY_VERSION="1.12.1" SCIPY_VERSION="0.19.0" CYTHON_VERSION="0.25.2"
    #        COVERAGE=true SCIKIT_LEARN_VERSION="0.18" STATSMODELS_VERSION="0.9.0"
    #        DEPLOY=true CACHEC=true DOCKER_IMAGE="quay.io/pypa/manylinux1_x86_64"
    #        DOCKER_CONTAINER_NAME="pyramidcontainer"

    # This environment tests Python 3.5 support on MAC OS X, using virtualenv
    # instead of the conda python distribution
    # - os: osx
    #   language: generic
    #   env: DISTRIB="conda" PYTHON_VERSION="3.5"
    #        NUMPY_VERSION="1.12.1" SCIPY_VERSION="0.19.0" CYTHON_VERSION="0.25.2"
    #        COVERAGE=true SCIKIT_LEARN_VERSION="0.18" STATSMODELS_VERSION="0.9.0"
    #        DEPLOY=true CACHEC=false

    # This environment tests the newest supported Anaconda release (4.4.0) and
    # runs on linux
    # - os: linux
    #   dist: trusty
    #   env: DISTRIB="conda" PYTHON_VERSION="3.6.1" INSTALL_MKL="true"
    #        NUMPY_VERSION="1.12.1" SCIPY_VERSION="0.19.0" CYTHON_VERSION="0.25.2"
    #        COVERAGE=true SCIKIT_LEARN_VERSION="0.18" STATSMODELS_VERSION="0.9.0"
    #        DEPLOY=false CACHEC=true

    # This environment use pytest to run the tests. It uses the newest
    # supported Anaconda release (4.4.0) and tests with pytests instead of nosetests.
    # This test runs on linux. As of v0.9+, deploy python 3.6 wheel
    - os: linux
      dist: trusty
      services:
        - docker
      env: DISTRIB="conda" PYTHON_VERSION="3.6.1" INSTALL_MKL="true"
           NUMPY_VERSION="1.12.1" SCIPY_VERSION="0.19.0" CYTHON_VERSION="0.25.2"
           COVERAGE=false SCIKIT_LEARN_VERSION="0.18" STATSMODELS_VERSION="0.9.0"
           DEPLOY=true CACHEC=true DOCKER_IMAGE="quay.io/pypa/manylinux1_x86_64"
           DOCKER_CONTAINER_NAME="pyramidcontainer" FORCE_DEPLOY=true

install: source build_tools/travis/install.sh
before_script: bash build_tools/travis/before_script.sh
script: bash build_tools/travis/test_script.sh

# we set +e to re-instate the error-tolerant state. The problem is Travis is broken on Mac OS
# builds right now due to Issue 6307 (https://github.com/travis-ci/travis-ci/issues/6307)
# and fails at the end of a successful build. This will allow the build to recover even if
# a non-zero status code is encountered. (had `- set +e`)
after_success:
  - source build_tools/travis/after_success.sh  # || echo "shell_session_update failed"
  # Build the wheels every time so we can debug
  - bash build_tools/travis/build_wheels.sh
  - ls dist/

# TODO: do we want "always?"
notifications:
  slack:
    rooms:
    - tgsmith61591-gh:mWyfLXzxRAHCKD2QRHWvHZaX#pyramid-cicd
    on_success: always
    on_failure: always
    on_pull_requests: true

deploy:
  provider: script
  skip_cleanup: true
  script: python -m twine upload --skip-existing dist/*.whl
  on:
    all_branches: true
    condition: "$FORCE_DEPLOY = true"
